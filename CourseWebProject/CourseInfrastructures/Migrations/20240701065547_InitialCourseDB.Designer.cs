// <auto-generated />
using System;
using CourseInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseInfrastructure.Migrations
{
    [DbContext(typeof(CoursesDbContext))]
    [Migration("20240701065547_InitialCourseDB")]
    partial class InitialCourseDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseDomain.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A2B4E099F62");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Category 1"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Category 2"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Category 3"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Category 4"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Category 5"
                        });
                });

            modelBuilder.Entity("CourseDomain.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("CompletionTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificateId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            CertificateId = 1,
                            CertificateUrl = "https://example.com/certificate1",
                            CompletionDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionTime = new TimeSpan(0, 2, 0, 0, 0),
                            Description = "Description for Certificate 1",
                            IssuedBy = "Issuing Authority 1",
                            Title = "Certificate 1"
                        },
                        new
                        {
                            CertificateId = 2,
                            CertificateUrl = "https://example.com/certificate2",
                            CompletionDate = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompletionTime = new TimeSpan(0, 1, 30, 0, 0),
                            Description = "Description for Certificate 2",
                            IssuedBy = "Issuing Authority 2",
                            Title = "Certificate 2"
                        });
                });

            modelBuilder.Entity("CourseDomain.Checkout", b =>
                {
                    b.Property<int>("CheckoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CheckoutID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckoutId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TransactionID");

                    b.HasKey("CheckoutId")
                        .HasName("PK__Checkout__E07EF51CCFBA1268");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Checkouts");

                    b.HasData(
                        new
                        {
                            CheckoutId = 1,
                            Amount = 50m,
                            CourseId = 1,
                            PaymentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(8964),
                            PaymentStatus = "Paid",
                            StudentId = 1,
                            TransactionId = "1ABD"
                        },
                        new
                        {
                            CheckoutId = 2,
                            Amount = 75m,
                            CourseId = 2,
                            PaymentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(8979),
                            PaymentStatus = "Pending",
                            StudentId = 2,
                            TransactionId = "16AHD"
                        },
                        new
                        {
                            CheckoutId = 3,
                            Amount = 100m,
                            CourseId = 3,
                            PaymentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(8982),
                            PaymentStatus = "Failed",
                            StudentId = 3,
                            TransactionId = "1ABDOD"
                        },
                        new
                        {
                            CheckoutId = 4,
                            Amount = 120m,
                            CourseId = 4,
                            PaymentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(8984),
                            PaymentStatus = "Paid",
                            StudentId = 4,
                            TransactionId = "1ADFHBD"
                        },
                        new
                        {
                            CheckoutId = 5,
                            Amount = 80m,
                            CourseId = 5,
                            PaymentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(8987),
                            PaymentStatus = "Pending",
                            StudentId = 5,
                            TransactionId = "1ABDD"
                        });
                });

            modelBuilder.Entity("CourseDomain.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<int>("Sale")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("URL");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__C92D71876D4CFFEC");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CategoryId = 1,
                            Description = "Description for Course 1",
                            Duration = "2 hours",
                            InstructorId = 1,
                            Level = "Beginner",
                            Price = 100m,
                            Rating = 4.5m,
                            Sale = 10,
                            Title = "Course 1",
                            Url = "https://example.com/course1"
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 2,
                            Description = "Description for Course 2",
                            Duration = "3 hours",
                            InstructorId = 2,
                            Level = "Intermediate",
                            Price = 150m,
                            Rating = 4.2m,
                            Sale = 5,
                            Title = "Course 2",
                            Url = "https://example.com/course2"
                        },
                        new
                        {
                            CourseId = 3,
                            CategoryId = 3,
                            Description = "Description for Course 3",
                            Duration = "2.5 hours",
                            InstructorId = 3,
                            Level = "Advanced",
                            Price = 120m,
                            Rating = 4.8m,
                            Sale = 15,
                            Title = "Course 3",
                            Url = "https://example.com/course3"
                        },
                        new
                        {
                            CourseId = 4,
                            CategoryId = 4,
                            Description = "Description for Course 4",
                            Duration = "4 hours",
                            InstructorId = 4,
                            Level = "Expert",
                            Price = 200m,
                            Rating = 4.9m,
                            Sale = 20,
                            Title = "Course 4",
                            Url = "https://example.com/course4"
                        },
                        new
                        {
                            CourseId = 5,
                            CategoryId = 5,
                            Description = "Description for Course 5",
                            Duration = "2.8 hours",
                            InstructorId = 5,
                            Level = "Intermediate",
                            Price = 180m,
                            Rating = 4.6m,
                            Sale = 12,
                            Title = "Course 5",
                            Url = "https://example.com/course5"
                        });
                });

            modelBuilder.Entity("CourseDomain.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("URL");

                    b.HasKey("DocumentId")
                        .HasName("PK__Document__1ABEEF6F6F6C41B2");

                    b.HasIndex("SectionId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            DocumentId = 1,
                            SectionId = 1,
                            Title = "Document 1",
                            Url = "https://example.com/document1"
                        },
                        new
                        {
                            DocumentId = 2,
                            SectionId = 2,
                            Title = "Document 2",
                            Url = "https://example.com/document2"
                        },
                        new
                        {
                            DocumentId = 3,
                            SectionId = 3,
                            Title = "Document 3",
                            Url = "https://example.com/document3"
                        },
                        new
                        {
                            DocumentId = 4,
                            SectionId = 4,
                            Title = "Document 4",
                            Url = "https://example.com/document4"
                        },
                        new
                        {
                            DocumentId = 5,
                            SectionId = 5,
                            Title = "Document 5",
                            Url = "https://example.com/document5"
                        });
                });

            modelBuilder.Entity("CourseDomain.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnrollmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("date");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("EnrollmentId")
                        .HasName("PK__Enrollme__7F6877FB59BADBB3");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            EnrollmentId = 1,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9013),
                            StudentId = 1
                        },
                        new
                        {
                            EnrollmentId = 2,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9018),
                            StudentId = 2
                        },
                        new
                        {
                            EnrollmentId = 3,
                            CourseId = 3,
                            EnrollmentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9020),
                            StudentId = 3
                        },
                        new
                        {
                            EnrollmentId = 4,
                            CourseId = 4,
                            EnrollmentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9021),
                            StudentId = 4
                        },
                        new
                        {
                            EnrollmentId = 5,
                            CourseId = 5,
                            EnrollmentDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9023),
                            StudentId = 5
                        });
                });

            modelBuilder.Entity("CourseDomain.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LectureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("time");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("VideoURL");

                    b.HasKey("LectureId")
                        .HasName("PK__Lectures__B739F69F45AA0B10");

                    b.HasIndex("SectionId");

                    b.ToTable("Lectures");

                    b.HasData(
                        new
                        {
                            LectureId = 1,
                            Content = "Lecture content 1",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            SectionId = 1,
                            Title = "Lecture 1",
                            VideoUrl = "https://example.com/video1"
                        },
                        new
                        {
                            LectureId = 2,
                            Content = "Lecture content 2",
                            Duration = new TimeSpan(0, 0, 45, 0, 0),
                            SectionId = 2,
                            Title = "Lecture 2",
                            VideoUrl = "https://example.com/video2"
                        },
                        new
                        {
                            LectureId = 3,
                            Content = "Lecture content 3",
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            SectionId = 3,
                            Title = "Lecture 3",
                            VideoUrl = "https://example.com/video3"
                        },
                        new
                        {
                            LectureId = 4,
                            Content = "Lecture content 4",
                            Duration = new TimeSpan(0, 0, 50, 0, 0),
                            SectionId = 4,
                            Title = "Lecture 4",
                            VideoUrl = "https://example.com/video4"
                        },
                        new
                        {
                            LectureId = 5,
                            Content = "Lecture content 5",
                            Duration = new TimeSpan(0, 0, 55, 0, 0),
                            SectionId = 5,
                            Title = "Lecture 5",
                            VideoUrl = "https://example.com/video5"
                        });
                });

            modelBuilder.Entity("CourseDomain.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2, 1)");

                    b.Property<int?>("ReOpen")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("date");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AEB05343AB");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Good course",
                            CourseId = 1,
                            Rating = 4.5m,
                            ReviewDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9147),
                            StudentId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Could be better",
                            CourseId = 2,
                            Rating = 3.8m,
                            ReviewDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9151),
                            StudentId = 2
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Excellent content",
                            CourseId = 3,
                            Rating = 4.2m,
                            ReviewDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9153),
                            StudentId = 3
                        },
                        new
                        {
                            ReviewId = 4,
                            Comment = "Very informative",
                            CourseId = 4,
                            Rating = 4.7m,
                            ReviewDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9155),
                            StudentId = 4
                        },
                        new
                        {
                            ReviewId = 5,
                            Comment = "Helped me a lot",
                            CourseId = 5,
                            Rating = 4.0m,
                            ReviewDate = new DateTime(2024, 7, 1, 13, 55, 46, 914, DateTimeKind.Local).AddTicks(9157),
                            StudentId = 5
                        });
                });

            modelBuilder.Entity("CourseDomain.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE3A672CA399");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Role 1"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Role 2"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Role 3"
                        },
                        new
                        {
                            RoleId = 4,
                            Name = "Role 4"
                        },
                        new
                        {
                            RoleId = 5,
                            Name = "Role 5"
                        });
                });

            modelBuilder.Entity("CourseDomain.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<TimeSpan?>("Duration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("time");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SectionId")
                        .HasName("PK__Sections__80EF08920752F11A");

                    b.HasIndex("CourseId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            SectionId = 1,
                            CourseId = 1,
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Title = "Section 1"
                        },
                        new
                        {
                            SectionId = 2,
                            CourseId = 2,
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            Title = "Section 2"
                        },
                        new
                        {
                            SectionId = 3,
                            CourseId = 3,
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            Title = "Section 3"
                        },
                        new
                        {
                            SectionId = 4,
                            CourseId = 4,
                            Duration = new TimeSpan(0, 1, 12, 0, 0),
                            Title = "Section 4"
                        },
                        new
                        {
                            SectionId = 5,
                            CourseId = 5,
                            Duration = new TimeSpan(0, 1, 48, 0, 0),
                            Title = "Section 5"
                        });
                });

            modelBuilder.Entity("CourseDomain.StudentCertificate", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.ToTable("StudentCertificates");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CertificateId = 1
                        },
                        new
                        {
                            UserId = 2,
                            CertificateId = 2
                        });
                });

            modelBuilder.Entity("CourseDomain.StudentCourse", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<bool>("IsInCart")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "CourseId")
                        .HasName("PK__StudentC__7B1A1BB4D2465F24");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("CourseDomain.SystemSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SettingId")
                        .HasName("PK__SystemSe__54372AFDC5ADF01D");

                    b.HasIndex("UserId");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            SettingId = 1,
                            Language = "English",
                            NotificationsEnabled = true,
                            Theme = "Dark",
                            UserId = 1
                        },
                        new
                        {
                            SettingId = 2,
                            Language = "French",
                            NotificationsEnabled = false,
                            Theme = "Light",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CourseDomain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACEF9D4767");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Bio = "Bio for User 1",
                            Email = "user1@example.com",
                            FullName = "User 1",
                            Password = "123",
                            Phone = "123456789",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            Bio = "Bio for User 2",
                            Email = "user2@example.com",
                            FullName = "User 2",
                            Password = "123",
                            Phone = "987654321",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            Bio = "Bio for User 3",
                            Email = "user3@example.com",
                            FullName = "User 3",
                            Password = "123",
                            Phone = "555555555",
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            Bio = "Bio for User 4",
                            Email = "user4@example.com",
                            FullName = "User 4",
                            Password = "123",
                            Phone = "111111111",
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            Bio = "Bio for User 5",
                            Email = "user5@example.com",
                            FullName = "User 5",
                            Password = "123",
                            Phone = "999999999",
                            RoleId = 5
                        });
                });

            modelBuilder.Entity("CourseDomain.Checkout", b =>
                {
                    b.HasOne("CourseDomain.Course", "Course")
                        .WithMany("Checkouts")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Checkouts__Cours__571DF1D5");

                    b.HasOne("CourseDomain.User", "Student")
                        .WithMany("Checkouts")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Checkouts__Stude__5629CD9C");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseDomain.Course", b =>
                {
                    b.HasOne("CourseDomain.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Courses__Categor__3E52440B");

                    b.HasOne("CourseDomain.User", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK__Courses__Instruc__3F466844");

                    b.Navigation("Category");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CourseDomain.Document", b =>
                {
                    b.HasOne("CourseDomain.Section", "Section")
                        .WithMany("Documents")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK__Documents__Secti__47DBAE45");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("CourseDomain.Enrollment", b =>
                {
                    b.HasOne("CourseDomain.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Enrollmen__Cours__4F7CD00D");

                    b.HasOne("CourseDomain.User", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Enrollmen__Stude__4E88ABD4");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseDomain.Lecture", b =>
                {
                    b.HasOne("CourseDomain.Section", "Section")
                        .WithMany("Lectures")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK__Lectures__Sectio__44FF419A");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("CourseDomain.Review", b =>
                {
                    b.HasOne("CourseDomain.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Reviews__CourseI__534D60F1");

                    b.HasOne("CourseDomain.User", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Reviews__Student__52593CB8");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseDomain.Section", b =>
                {
                    b.HasOne("CourseDomain.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Sections__Course__4222D4EF");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseDomain.StudentCertificate", b =>
                {
                    b.HasOne("CourseDomain.Certificate", "Certificate")
                        .WithMany("StudentCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseDomain.User", "User")
                        .WithMany("StudentCertificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseDomain.StudentCourse", b =>
                {
                    b.HasOne("CourseDomain.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentCo__Cours__4BAC3F29");

                    b.HasOne("CourseDomain.User", "User")
                        .WithMany("StudentCourses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__StudentCo__UserI__4AB81AF0");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseDomain.SystemSetting", b =>
                {
                    b.HasOne("CourseDomain.User", "User")
                        .WithMany("SystemSettings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__SystemSet__UserI__59FA5E80");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseDomain.User", b =>
                {
                    b.HasOne("CourseDomain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__RoleID__398D8EEE");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CourseDomain.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CourseDomain.Certificate", b =>
                {
                    b.Navigation("StudentCertificates");
                });

            modelBuilder.Entity("CourseDomain.Course", b =>
                {
                    b.Navigation("Checkouts");

                    b.Navigation("Enrollments");

                    b.Navigation("Reviews");

                    b.Navigation("Sections");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("CourseDomain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CourseDomain.Section", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("CourseDomain.User", b =>
                {
                    b.Navigation("Checkouts");

                    b.Navigation("Courses");

                    b.Navigation("Enrollments");

                    b.Navigation("Reviews");

                    b.Navigation("StudentCertificates");

                    b.Navigation("StudentCourses");

                    b.Navigation("SystemSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
